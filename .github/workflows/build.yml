name: Build

on:
  schedule:
    # 每2天自动运行一次 (UTC时间)
    - cron: '0 0 */2 * *'
  workflow_dispatch:  # 允许手动触发
  push:
    paths-ignore:     # 存储库发生代码更新时不自动执行
      - '**.config'
      - 'diy.sh'
      - '.github/workflows/**'

env:
  BUILD_DIR: immortalwrt-build

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      config_files: ${{ steps.find-configs.outputs.config_files }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Find config files
      id: find-configs
      run: |
        # 查找所有.config文件并格式化为JSON数组
        config_files=$(find . -name "*.config" -printf '"%f",')
        config_files="[${config_files%,}]"
        echo "config_files=$config_files" >> $GITHUB_OUTPUT
        echo "Found config files: $config_files"

  build:
    needs: setup
    runs-on: ubuntu-latest
    # 关键设置：允许单个任务失败而不影响整个job
    continue-on-error: ${{ matrix.allow_failure }}
    strategy:
      matrix:
        config_file: ${{ fromJSON(needs.setup.outputs.config_files) }}
        # 为每个配置设置allow_failure为true，这样单个失败不会影响其他
        allow_failure: [true]
      # 设置最大并行数，避免资源耗尽
      max-parallel: 4
      # 即使某些任务失败也继续执行其他任务
      fail-fast: false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'

    - name: Clone ImmortalWrt repository
      run: |
        git clone https://github.com/immortalwrt/immortalwrt.git --depth=1 -b master $BUILD_DIR

    - name: Copy config file
      run: |
        cp "${{ matrix.config_file }}" $BUILD_DIR/.config
        echo "Using config file: ${{ matrix.config_file }}"

    - name: Check and copy diy.sh if exists
      run: |
        if [ -f diy.sh ]; then
          cp diy.sh $BUILD_DIR/
          chmod +x $BUILD_DIR/diy.sh
          echo "diy.sh found and copied"
        else
          echo "diy.sh not found, skipping"
        fi

    - name: Update feeds
      run: |
        cd $BUILD_DIR
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Run diy.sh if exists
      run: |
        cd $BUILD_DIR
        if [ -f diy.sh ]; then
          echo "Running diy.sh..."
          ./diy.sh
        else
          echo "diy.sh not found, skipping"
        fi

    - name: Build firmware
      run: |
        set +e  # 允许脚本中的命令失败而不退出
        
        cd $BUILD_DIR
        
        # 从文件名解析AAA和BBB
        CONFIG_FILE="${{ matrix.config_file }}"
        FILENAME=$(echo "$CONFIG_FILE" | sed 's/\.config$//')
        
        IFS=';' read -ra PARTS <<< "$FILENAME"
        AAA=${PARTS[0]}
        BBB=${PARTS[1]}
        
        echo "Building for: AAA=$AAA, BBB=$BBB"
        
        # 生成defconfig，过滤常见的无害警告
        make defconfig 2>&1 | grep -E -v \
          -e "WARNING:.*does not exist" \
          -e "WARNING:.*missing dependencies" \
          -e "WARNING:.*depends on" || true
        
        # 检查defconfig是否成功
        if [ ! -f .config ]; then
          echo "Error: .config file was not created!"
          exit 1
        fi
        
        echo "Defconfig completed successfully"
        
        # 开始编译
        echo "Starting compilation with $(($(nproc) + 1)) threads..."
        
        # 尝试编译，但即使失败也继续执行后续步骤
        make -j$(($(nproc) + 1)) 2>&1 | tee compile.log
        COMPILE_STATUS=${PIPESTATUS[0]}
        
        if [ $COMPILE_STATUS -ne 0 ]; then
          echo "Multi-thread compilation failed, retrying with single thread..."
          make -j1 V=s 2>&1 | tee compile-single.log
          COMPILE_STATUS=${PIPESTATUS[0]}
        fi
        
        if [ $COMPILE_STATUS -eq 0 ]; then
          echo "Compilation successful"
          # 创建输出目录
          mkdir -p ../firmware-output/${AAA}
          
          # 复制编译好的固件
          find bin/targets/ -name "*.bin" -exec cp {} ../firmware-output/${AAA}/ \; 2>/dev/null || true
          find bin/targets/ -name "*.gz" -exec cp {} ../firmware-output/${AAA}/ \; 2>/dev/null || true
          find bin/targets/ -name "*.img" -exec cp {} ../firmware-output/${AAA}/ \; 2>/dev/null || true
          find bin/targets/ -name "*.trx" -exec cp {} ../firmware-output/${AAA}/ \; 2>/dev/null || true
          
          echo "Firmware files copied successfully"
        else
          echo "Compilation failed for config: ${{ matrix.config_file }}"
          # 这里不退出，让其他配置继续编译
        fi

    - name: Create package if compilation succeeded
      if: success() || failure()  # 无论编译是否成功都执行
      run: |
        CONFIG_FILE="${{ matrix.config_file }}"
        FILENAME=$(echo "$CONFIG_FILE" | sed 's/\.config$//')
        AAA=$(echo "$FILENAME" | cut -d';' -f1)
        BBB=$(echo "$FILENAME" | cut -d';' -f2)
        PACKAGE_NAME="${AAA}-${BBB}-firmware.zip"
        
        # 检查是否有编译输出的文件
        if [ -d "firmware-output/${AAA}" ] && [ -n "$(ls -A firmware-output/${AAA} 2>/dev/null)" ]; then
          echo "Creating package: $PACKAGE_NAME"
          cd firmware-output/${AAA}
          zip -r "../../${PACKAGE_NAME}" .
          cd ../..
          echo "Package created successfully"
        else
          echo "No firmware files found for $PACKAGE_NAME, skipping package creation"
          # 创建一个空文件标记编译失败
          touch "${PACKAGE_NAME}.failed"
        fi

    - name: Upload successful firmware package
      if: success()  # 只有编译成功才上传
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.config_file }}-success
        path: |
          ${AAA}-${BBB}-firmware.zip
        if-no-files-found: ignore

    - name: Upload failure marker
      if: failure()  # 编译失败时上传标记文件
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.config_file }}-failed
        path: |
          ${AAA}-${BBB}-firmware.zip.failed
        if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    # 即使build job中有失败的任务也继续执行
    if: always()
    steps:
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts

    - name: Process successful builds
      run: |
        mkdir -p release-firmware
        
        # 复制所有成功的固件包
        find all-artifacts -name "*.zip" -exec cp {} release-firmware/ \; 2>/dev/null || true
        
        echo "Successful firmware packages:"
        ls -la release-firmware/ || echo "No successful builds"

    - name: Create summary of build results
      run: |
        # 创建构建结果摘要
        echo "# Build Results - ${{ steps.date.outputs.date }}" > build-summary.md
        echo "" >> build-summary.md
        echo "## Successful Builds" >> build-summary.md
        find all-artifacts -name "*-success" -type d | while read dir; do
          config=$(basename "$dir" | sed 's/-success$//')
          echo "- ✅ $config" >> build-summary.md
        done || echo "- No successful builds" >> build-summary.md
        
        echo "" >> build-summary.md
        echo "## Failed Builds" >> build-summary.md
        find all-artifacts -name "*-failed" -type d | while read dir; do
          config=$(basename "$dir" | sed 's/-failed$//')
          echo "- ❌ $config" >> build-summary.md
        done || echo "- No failed builds" >> build-summary.md

    - name: Create release with successful firmware
      if: success() || failure()  # 无论是否有成功构建都创建release
      uses: softprops/action-gh-release@v1
      with:
        files: release-firmware/*.zip
        tag_name: build-${{ github.run_id }}
        name: Build #${{ github.run_number }}
        body: |
          Auto-built ImmortalWrt firmware
          
          Build date: ${{ steps.date.outputs.date }}
          Commit: ${{ github.sha }}
          Run ID: ${{ github.run_id }}
          
          ## Build Summary
          
          ${{ steps.create-summary.outputs.content }}
          
          ### Note
          Only successful builds are included in this release.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
