name: Build ImmortalWRT

on:
  schedule:
    - cron: '0 0 */2 * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  discover-configs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Discover config files
        id: set-matrix
        run: |
          configs=$(ls *.config 2>/dev/null | grep ';' || true)
          matrix='[]'
          if [ -n "$configs" ]; then
            jq_array=()
            for config in $configs; do
              owner=$(echo $config | cut -d';' -f1)
              type=$(echo $config | cut -d';' -f2 | sed 's/\.config$//')
              name="${type}_for_${owner}"
              jq_array+=("{\"name\": \"$name\", \"config\": \"$config\"}")
            done
            matrix=$(jq -c -n --argjson arr "[${jq_array[*]}]" '$arr')
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: discover-configs
    runs-on: ubuntu-latest
    if: ${{ needs.discover-configs.outputs.matrix != '[]' }}
    strategy:
      matrix: ${{ fromJson(needs.discover-configs.outputs.matrix) }}
      fail-fast: false
    name: ${{ matrix.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache downloads
        uses: actions/cache@v4
        with:
          key: dl-${{ runner.os }}-immortalwrt-master-${{ hashFiles('feeds.conf.default') }}
          path: dl
          restore-keys: |
            dl-${{ runner.os }}-immortalwrt-master-

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          key: ccache-${{ matrix.name }}-${{ runner.os }}-${{ hashFiles(matrix.config) }}
          path: ~/.ccache
          restore-keys: |
            ccache-${{ matrix.name }}-${{ runner.os }}-

      - name: Prepare build environment
        run: sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'

      - name: Clone ImmortalWRT
        run: git clone -b master https://github.com/immortalwrt/immortalwrt

      - name: Move downloads cache if exists
        run: |
          if [ -d dl ]; then
            mv dl immortalwrt/dl
          fi

      - name: Update and install feeds
        working-directory: immortalwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Run diy.sh if exists
        working-directory: immortalwrt
        run: |
          if [ -f ../diy.sh ]; then
            cp ../diy.sh .
            chmod +x diy.sh
            ./diy.sh
          fi

      - name: Copy config and build
        working-directory: immortalwrt
        env:
          CONFIG_CCACHE: y
        run: |
          cp ../${{ matrix.config }} .config
          make defconfig
          make download -j$(nproc)
          make -j$(nproc) V=s

      - name: Move downloads back to cache
        if: always()
        run: |
          if [ -d immortalwrt/dl ]; then
            mv immortalwrt/dl .
          fi

      - name: Compress firmware
        working-directory: immortalwrt/bin/targets
        if: success()
        run: |
          for file in $(find . -type f -name '*.bin' -o -name '*.img' -o -name '*.gz'); do
            zip -r "${file}.zip" "$file"
          done

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: firmware-${{ matrix.name }}
          path: immortalwrt/bin/targets/**/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release
        run: |
          TAG_NAME="build-$(date +%Y%m%d-%H%M%S)"
          gh release create "$TAG_NAME" --title "$TAG_NAME" --notes "Automated build"

          for zip in $(find ./artifacts -type f -name '*.zip'); do
            gh release upload "$TAG_NAME" "$zip"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete old releases
        run: |
          releases=$(gh release list --limit 100 | sort -k3r | tail -n +6 | awk '{print $1}')
          for rel in $releases; do
            gh release delete "$rel" --yes
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
