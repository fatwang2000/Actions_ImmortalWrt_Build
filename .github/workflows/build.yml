name: Build ImmortalWrt Firmware

on:
  schedule:
    # 每2天自动运行一次 (UTC时间)
    - cron: '0 0 */2 * *'
  workflow_dispatch:  # 允许手动触发
  push:
    paths-ignore:     # 存储库发生代码更新时不自动执行
      - '**.config'
      - 'diy.sh'
      - '.github/workflows/**'

env:
  BUILD_DIR: immortalwrt-build

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      config_files: ${{ steps.find-configs.outputs.config_files }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Find config files
      id: find-configs
      run: |
        # 查找所有.config文件并格式化为JSON数组
        config_files=$(find . -name "*.config" -printf '"%f",')
        config_files="[${config_files%,}]"
        echo "config_files=$config_files" >> $GITHUB_OUTPUT
        echo "Found config files: $config_files"

  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config_file: ${{ fromJSON(needs.setup.outputs.config_files) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'

    - name: Clone ImmortalWrt repository
      run: |
        git clone https://github.com/immortalwrt/immortalwrt.git --depth=1 -b master $BUILD_DIR

    - name: Copy config file
      run: |
        cp "${{ matrix.config_file }}" $BUILD_DIR/.config
        echo "Using config file: ${{ matrix.config_file }}"

    - name: Check and copy diy.sh if exists
      run: |
        if [ -f diy.sh ]; then
          cp diy.sh $BUILD_DIR/
          chmod +x $BUILD_DIR/diy.sh
          echo "diy.sh found and copied"
        else
          echo "diy.sh not found, skipping"
        fi

    - name: Update feeds
      run: |
        cd $BUILD_DIR
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Run diy.sh if exists
      run: |
        cd $BUILD_DIR
        if [ -f diy.sh ]; then
          echo "Running diy.sh..."
          ./diy.sh
        else
          echo "diy.sh not found, skipping"
        fi

    - name: Build firmware
      run: |
        cd $BUILD_DIR
        
        # 使用sed移除文件扩展名
        FILENAME=$(echo "${{ matrix.config_file }}" | sed 's/\.config$//')
        
        IFS=';' read -ra PARTS <<< "$FILENAME"
        AAA=${PARTS[0]}
        BBB=${PARTS[1]}
        
        echo "Building for: AAA=$AAA, BBB=$BBB"
        
        # 生成defconfig
        make defconfig
        
        # 开始编译
        make -j$(($(nproc) + 1)) || make -j1 V=s
        
        # 创建输出目录
        mkdir -p ../firmware-output/${AAA}
        
        # 复制编译好的固件
        find bin/targets -name "*.bin" -exec cp {} ../firmware-output/${AAA}/ \; 2>/dev/null || true
        find bin/targets -name "*.gz" -exec cp {} ../firmware-output/${AAA}/ \; 2>/dev/null || true
        find bin/targets -name "*.img" -exec cp {} ../firmware-output/${AAA}/ \; 2>/dev/null || true
        
    - name: Create individual firmware package
      run: |
        # 直接使用sed处理文件名
        CONFIG_FILE="${{ matrix.config_file }}"
        FILENAME=$(echo "$CONFIG_FILE" | sed 's/\.config$//')
        
        AAA=$(echo "$FILENAME" | cut -d';' -f1)
        BBB=$(echo "$FILENAME" | cut -d';' -f2)
        
        PACKAGE_NAME="${AAA}-${BBB}-firmware.zip"
        
        echo "Creating package: $PACKAGE_NAME"
        
        # 创建压缩包
        cd firmware-output/${AAA}
        zip -r "../../${PACKAGE_NAME}" .
        cd ../..
        
        echo "Created package: ${PACKAGE_NAME}"

    - name: Upload individual firmware package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.config_file }}-firmware
        path: "$PACKAGE_NAME"
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: individual-packages

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find individual-packages -type f -name "*.zip"

    - name: Create release with individual packages
      uses: softprops/action-gh-release@v1
      with:
        files: |
          individual-packages/**/*.zip
        tag_name: build-${{ github.run_id }}
        name: Build #${{ github.run_number }}
        body: |
          Auto-built ImmortalWrt firmware
          
          Build date: ${{ steps.date.outputs.date }}
          Commit: ${{ github.sha }}
          Run ID: ${{ github.run_id }}
          
          ## Firmware Packages
          
          Each package contains firmware for a specific configuration.
          
          ### Configurations included:
          ${{ fromJSON(needs.setup.outputs.config_files) }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
